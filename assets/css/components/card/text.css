/* 
 * Text Card Elements
 */

.card__text {
  display: none;
  width: 100%;
  flex-direction: column;
  margin: calc(var(--base-spacing) / 2) 0;
  padding: var(--base-spacing) calc(var(--base-spacing) * 3) var(--base-spacing) 0;
  outline: 0px solid transparent;
  cursor: text;
  max-width: 72ch;
}

/* Adjust headings within text elem */
.card__text h1,
.card__text h2,
.card__text h3 {
  margin: 0;
}

/* Card placeholder text */
.card__text::before {
  display: none;
  opacity: 0;
  content: attr(data-placeholder);
  position: absolute;
  color: var(--secondary-font-color);
  transition: opacity var(--base-duration) var(--base-timing);
}

.card__text-menu {
  position: absolute;
}

.card__text-menu-item {
  position: relative;
}

.card__text-menu-item--divider {
  width: 1px;
  margin: 0 calc(var(--base-spacing) / 4);
  background-color: var(--gray2);
}


/* Card text editor elem */
.card__editor {
  display: none;
  position: absolute;
  z-index: 4;
  padding: calc(var(--base-spacing) / 2);
  background-color: var(--base-background-color);
  border-radius: var(--base-border-radius);
  box-shadow: var(--base-box-shadow);
  transition: opacity var(--base-duration) var(--base-timing);
}

.card__editor-menu,
.card__editor-alignment {
  display: none;
  position: absolute;
  z-index: 4;
  padding: calc(var(--base-spacing) / 2);
  background: var(--base-background-color);
  box-shadow: var(--base-box-shadow);
  border-radius: var(--secondary-border-radius);
}

.card__editor-menu {
  top: 100%;
  left: calc(100% - calc(var(--base-spacing) * 3));
  transform: translateY(calc(var(--base-spacing) / 2));
}

.card__editor-alignment {
  top: 100%;
  left: 100%;
  transform: translateY(calc(calc(var(--base-spacing) * 4) * -1));
}

.card__editor-section {
  display: flex;
  padding-right: calc(var(--base-spacing) / 4);
  margin-right: calc(var(--base-spacing) / 4);
  border-right: var(--base-border);
}


/* 
 * Text Card Modifiers 
 */

/* Hide controls on text cards */
.card--text .card__controls {
  display: none;
}

/* 
 * 1. Display card text once card type = `text`
 * 2. Ensure text area fills height once set to text card 
 */
.card--text .card__text {
  display: flex; /* 1 */
  height: 100%; /* 2 */
}

/* Show card editor elem once active state is applied */
.card__editor.is-active {
  display: flex;
}

/* Text alignment */
.card__text[data-text-align="left"] { 
  text-align: left;
}

.card__text[data-text-align="center"] { 
  text-align: center;
}

.card__text[data-text-align="right"] { 
  text-align: right;
}

/* Vertical alignment */
.card__text[data-vert-align="top"] { 
  justify-content: flex-start;
}

.card__text[data-vert-align="center"] { 
  justify-content: center;
}

.card__text[data-vert-align="bottom"] { 
  justify-content: flex-end;
}



/* 
 * Text Card States 
 */

/* Display card text but keep hidden until hover */
.card--text .card__text::before {
  display: block;
}

/* Show card placeholder text on hover */
.card--text:hover .card__text::before {
  opacity: 1;
}

/* Hide card placeholder text when active state is applied */
.card__text.is-active::before {
  display: none;
}

/* Prevent pointer event from firing on child elems during drag */
.is-dragActive .card__text {
  pointer-events: none;
}

/* Menu toggled states */
.card__editor-menu.is-active,
.card__editor-alignment.is-active {
  display: block;
}